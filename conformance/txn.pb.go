// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: txn.proto

package conformance

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message header contains the counts of required readonly and signatures
type MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRequiredSignatures       uint32 `protobuf:"varint,1,opt,name=num_required_signatures,json=numRequiredSignatures,proto3" json:"num_required_signatures,omitempty"`
	NumReadonlySignedAccounts   uint32 `protobuf:"varint,2,opt,name=num_readonly_signed_accounts,json=numReadonlySignedAccounts,proto3" json:"num_readonly_signed_accounts,omitempty"`
	NumReadonlyUnsignedAccounts uint32 `protobuf:"varint,3,opt,name=num_readonly_unsigned_accounts,json=numReadonlyUnsignedAccounts,proto3" json:"num_readonly_unsigned_accounts,omitempty"`
}

func (x *MessageHeader) Reset() {
	*x = MessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader) ProtoMessage() {}

func (x *MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader.ProtoReflect.Descriptor instead.
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{0}
}

func (x *MessageHeader) GetNumRequiredSignatures() uint32 {
	if x != nil {
		return x.NumRequiredSignatures
	}
	return 0
}

func (x *MessageHeader) GetNumReadonlySignedAccounts() uint32 {
	if x != nil {
		return x.NumReadonlySignedAccounts
	}
	return 0
}

func (x *MessageHeader) GetNumReadonlyUnsignedAccounts() uint32 {
	if x != nil {
		return x.NumReadonlyUnsignedAccounts
	}
	return 0
}

// The instruction a transaction executes
type CompiledInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index into the message pubkey array
	ProgramIdIndex uint32 `protobuf:"varint,1,opt,name=program_id_index,json=programIdIndex,proto3" json:"program_id_index,omitempty"`
	// Indexes into the message pubkey array
	Accounts []uint32 `protobuf:"varint,2,rep,packed,name=accounts,proto3" json:"accounts,omitempty"`
	Data     []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CompiledInstruction) Reset() {
	*x = CompiledInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledInstruction) ProtoMessage() {}

func (x *CompiledInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledInstruction.ProtoReflect.Descriptor instead.
func (*CompiledInstruction) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{1}
}

func (x *CompiledInstruction) GetProgramIdIndex() uint32 {
	if x != nil {
		return x.ProgramIdIndex
	}
	return 0
}

func (x *CompiledInstruction) GetAccounts() []uint32 {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *CompiledInstruction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// List of address table lookups used to load additional accounts for a transaction
type MessageAddressTableLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountKey      []byte   `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	WritableIndexes []uint32 `protobuf:"varint,2,rep,packed,name=writable_indexes,json=writableIndexes,proto3" json:"writable_indexes,omitempty"`
	ReadonlyIndexes []uint32 `protobuf:"varint,3,rep,packed,name=readonly_indexes,json=readonlyIndexes,proto3" json:"readonly_indexes,omitempty"`
}

func (x *MessageAddressTableLookup) Reset() {
	*x = MessageAddressTableLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAddressTableLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAddressTableLookup) ProtoMessage() {}

func (x *MessageAddressTableLookup) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAddressTableLookup.ProtoReflect.Descriptor instead.
func (*MessageAddressTableLookup) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{2}
}

func (x *MessageAddressTableLookup) GetAccountKey() []byte {
	if x != nil {
		return x.AccountKey
	}
	return nil
}

func (x *MessageAddressTableLookup) GetWritableIndexes() []uint32 {
	if x != nil {
		return x.WritableIndexes
	}
	return nil
}

func (x *MessageAddressTableLookup) GetReadonlyIndexes() []uint32 {
	if x != nil {
		return x.ReadonlyIndexes
	}
	return nil
}

// Addresses loaded with on-chain lookup tables
type LoadedAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Writable [][]byte `protobuf:"bytes,1,rep,name=writable,proto3" json:"writable,omitempty"`
	Readonly [][]byte `protobuf:"bytes,2,rep,name=readonly,proto3" json:"readonly,omitempty"`
}

func (x *LoadedAddresses) Reset() {
	*x = LoadedAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadedAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadedAddresses) ProtoMessage() {}

func (x *LoadedAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadedAddresses.ProtoReflect.Descriptor instead.
func (*LoadedAddresses) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{3}
}

func (x *LoadedAddresses) GetWritable() [][]byte {
	if x != nil {
		return x.Writable
	}
	return nil
}

func (x *LoadedAddresses) GetReadonly() [][]byte {
	if x != nil {
		return x.Readonly
	}
	return nil
}

// Message contains the transaction data
type TransactionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this is a legacy message or not
	IsLegacy bool           `protobuf:"varint,1,opt,name=is_legacy,json=isLegacy,proto3" json:"is_legacy,omitempty"`
	Header   *MessageHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// Vector of pubkeys
	AccountKeys [][]byte `protobuf:"bytes,3,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	// Data associated with the accounts referred above. Not all accounts need to be here.
	AccountSharedData []*AcctState `protobuf:"bytes,4,rep,name=account_shared_data,json=accountSharedData,proto3" json:"account_shared_data,omitempty"`
	// Recent blockhash provided in message
	RecentBlockhash []byte `protobuf:"bytes,5,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	// The instructions this transaction executes
	Instructions []*CompiledInstruction `protobuf:"bytes,6,rep,name=instructions,proto3" json:"instructions,omitempty"`
	// Not available in legacy message
	AddressTableLookups []*MessageAddressTableLookup `protobuf:"bytes,7,rep,name=address_table_lookups,json=addressTableLookups,proto3" json:"address_table_lookups,omitempty"`
	// Not available in legacy messages
	LoadedAddresses *LoadedAddresses `protobuf:"bytes,8,opt,name=loaded_addresses,json=loadedAddresses,proto3" json:"loaded_addresses,omitempty"`
}

func (x *TransactionMessage) Reset() {
	*x = TransactionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMessage) ProtoMessage() {}

func (x *TransactionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMessage.ProtoReflect.Descriptor instead.
func (*TransactionMessage) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionMessage) GetIsLegacy() bool {
	if x != nil {
		return x.IsLegacy
	}
	return false
}

func (x *TransactionMessage) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TransactionMessage) GetAccountKeys() [][]byte {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

func (x *TransactionMessage) GetAccountSharedData() []*AcctState {
	if x != nil {
		return x.AccountSharedData
	}
	return nil
}

func (x *TransactionMessage) GetRecentBlockhash() []byte {
	if x != nil {
		return x.RecentBlockhash
	}
	return nil
}

func (x *TransactionMessage) GetInstructions() []*CompiledInstruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *TransactionMessage) GetAddressTableLookups() []*MessageAddressTableLookup {
	if x != nil {
		return x.AddressTableLookups
	}
	return nil
}

func (x *TransactionMessage) GetLoadedAddresses() *LoadedAddresses {
	if x != nil {
		return x.LoadedAddresses
	}
	return nil
}

// A valid verified transaction
type SanitizedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction information
	Message *TransactionMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The message hash
	MessageHash []byte `protobuf:"bytes,2,opt,name=message_hash,json=messageHash,proto3" json:"message_hash,omitempty"`
	// Is this a voting transaction?
	IsSimpleVoteTx bool `protobuf:"varint,3,opt,name=is_simple_vote_tx,json=isSimpleVoteTx,proto3" json:"is_simple_vote_tx,omitempty"`
	// The signatures needed in the transaction
	Signatures [][]byte `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SanitizedTransaction) Reset() {
	*x = SanitizedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SanitizedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SanitizedTransaction) ProtoMessage() {}

func (x *SanitizedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SanitizedTransaction.ProtoReflect.Descriptor instead.
func (*SanitizedTransaction) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{5}
}

func (x *SanitizedTransaction) GetMessage() *TransactionMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SanitizedTransaction) GetMessageHash() []byte {
	if x != nil {
		return x.MessageHash
	}
	return nil
}

func (x *SanitizedTransaction) GetIsSimpleVoteTx() bool {
	if x != nil {
		return x.IsSimpleVoteTx
	}
	return false
}

func (x *SanitizedTransaction) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// This Transaction context be used to fuzz either `load_execute_and_commit_transactions`,
// `load_and_execute_transactions` in `bank.rs` or `load_and_execute_sanitized_transactions`
// in `svm/transaction_processor.rs`
type TxnContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction data
	Tx *SanitizedTransaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The maximum age allowed for this transaction
	MaxAge uint64 `protobuf:"varint,2,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Up to 300 (actually 301) most recent blockhashes (ordered from oldest to newest)
	BlockhashQueue [][]byte      `protobuf:"bytes,3,rep,name=blockhash_queue,json=blockhashQueue,proto3" json:"blockhash_queue,omitempty"`
	EpochCtx       *EpochContext `protobuf:"bytes,4,opt,name=epoch_ctx,json=epochCtx,proto3" json:"epoch_ctx,omitempty"`
	SlotCtx        *SlotContext  `protobuf:"bytes,5,opt,name=slot_ctx,json=slotCtx,proto3" json:"slot_ctx,omitempty"`
}

func (x *TxnContext) Reset() {
	*x = TxnContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnContext) ProtoMessage() {}

func (x *TxnContext) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnContext.ProtoReflect.Descriptor instead.
func (*TxnContext) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{6}
}

func (x *TxnContext) GetTx() *SanitizedTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *TxnContext) GetMaxAge() uint64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *TxnContext) GetBlockhashQueue() [][]byte {
	if x != nil {
		return x.BlockhashQueue
	}
	return nil
}

func (x *TxnContext) GetEpochCtx() *EpochContext {
	if x != nil {
		return x.EpochCtx
	}
	return nil
}

func (x *TxnContext) GetSlotCtx() *SlotContext {
	if x != nil {
		return x.SlotCtx
	}
	return nil
}

// The resulting state of an account after a transaction
type ResultingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcctStates      []*AcctState  `protobuf:"bytes,1,rep,name=acct_states,json=acctStates,proto3" json:"acct_states,omitempty"`
	RentDebits      []*RentDebits `protobuf:"bytes,2,rep,name=rent_debits,json=rentDebits,proto3" json:"rent_debits,omitempty"`
	TransactionRent uint64        `protobuf:"varint,3,opt,name=transaction_rent,json=transactionRent,proto3" json:"transaction_rent,omitempty"`
}

func (x *ResultingState) Reset() {
	*x = ResultingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultingState) ProtoMessage() {}

func (x *ResultingState) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultingState.ProtoReflect.Descriptor instead.
func (*ResultingState) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{7}
}

func (x *ResultingState) GetAcctStates() []*AcctState {
	if x != nil {
		return x.AcctStates
	}
	return nil
}

func (x *ResultingState) GetRentDebits() []*RentDebits {
	if x != nil {
		return x.RentDebits
	}
	return nil
}

func (x *ResultingState) GetTransactionRent() uint64 {
	if x != nil {
		return x.TransactionRent
	}
	return 0
}

// The rent state for an account after a transaction
type RentDebits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey        []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	RentCollected int64  `protobuf:"varint,2,opt,name=rent_collected,json=rentCollected,proto3" json:"rent_collected,omitempty"`
}

func (x *RentDebits) Reset() {
	*x = RentDebits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RentDebits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RentDebits) ProtoMessage() {}

func (x *RentDebits) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RentDebits.ProtoReflect.Descriptor instead.
func (*RentDebits) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{8}
}

func (x *RentDebits) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *RentDebits) GetRentCollected() int64 {
	if x != nil {
		return x.RentCollected
	}
	return 0
}

type FeeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionFee    uint64 `protobuf:"varint,1,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee,omitempty"`
	PrioritizationFee uint64 `protobuf:"varint,2,opt,name=prioritization_fee,json=prioritizationFee,proto3" json:"prioritization_fee,omitempty"`
}

func (x *FeeDetails) Reset() {
	*x = FeeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeDetails) ProtoMessage() {}

func (x *FeeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeDetails.ProtoReflect.Descriptor instead.
func (*FeeDetails) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{9}
}

func (x *FeeDetails) GetTransactionFee() uint64 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *FeeDetails) GetPrioritizationFee() uint64 {
	if x != nil {
		return x.PrioritizationFee
	}
	return 0
}

// The execution results for a transaction
type TxnResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this transaction was executed
	Executed bool `protobuf:"varint,1,opt,name=executed,proto3" json:"executed,omitempty"`
	// Whether there was a sanitization error
	SanitizationError bool `protobuf:"varint,2,opt,name=sanitization_error,json=sanitizationError,proto3" json:"sanitization_error,omitempty"`
	// The state of each account after the transaction
	ResultingState *ResultingState `protobuf:"bytes,3,opt,name=resulting_state,json=resultingState,proto3" json:"resulting_state,omitempty"`
	Rent           uint64          `protobuf:"varint,4,opt,name=rent,proto3" json:"rent,omitempty"`
	// If an executed transaction has no error
	IsOk bool `protobuf:"varint,5,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	// The transaction status (error code)
	Status uint32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// The return data from this transaction, if any
	ReturnData []byte `protobuf:"bytes,7,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	// Number of executed compute units
	ExecutedUnits uint64 `protobuf:"varint,8,opt,name=executed_units,json=executedUnits,proto3" json:"executed_units,omitempty"`
	// The change in accounts data len for this transaction
	AccountsDataLenDelta int64 `protobuf:"varint,9,opt,name=accounts_data_len_delta,json=accountsDataLenDelta,proto3" json:"accounts_data_len_delta,omitempty"`
	// The collected fees in this transaction
	FeeDetails *FeeDetails `protobuf:"bytes,10,opt,name=fee_details,json=feeDetails,proto3" json:"fee_details,omitempty"`
}

func (x *TxnResult) Reset() {
	*x = TxnResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnResult) ProtoMessage() {}

func (x *TxnResult) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnResult.ProtoReflect.Descriptor instead.
func (*TxnResult) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{10}
}

func (x *TxnResult) GetExecuted() bool {
	if x != nil {
		return x.Executed
	}
	return false
}

func (x *TxnResult) GetSanitizationError() bool {
	if x != nil {
		return x.SanitizationError
	}
	return false
}

func (x *TxnResult) GetResultingState() *ResultingState {
	if x != nil {
		return x.ResultingState
	}
	return nil
}

func (x *TxnResult) GetRent() uint64 {
	if x != nil {
		return x.Rent
	}
	return 0
}

func (x *TxnResult) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *TxnResult) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TxnResult) GetReturnData() []byte {
	if x != nil {
		return x.ReturnData
	}
	return nil
}

func (x *TxnResult) GetExecutedUnits() uint64 {
	if x != nil {
		return x.ExecutedUnits
	}
	return 0
}

func (x *TxnResult) GetAccountsDataLenDelta() int64 {
	if x != nil {
		return x.AccountsDataLenDelta
	}
	return 0
}

func (x *TxnResult) GetFeeDetails() *FeeDetails {
	if x != nil {
		return x.FeeDetails
	}
	return nil
}

// Txn fixtures
type TxnFixture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Context
	Input *TxnContext `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Effects
	Output *TxnResult `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *TxnFixture) Reset() {
	*x = TxnFixture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txn_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnFixture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnFixture) ProtoMessage() {}

func (x *TxnFixture) ProtoReflect() protoreflect.Message {
	mi := &file_txn_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnFixture.ProtoReflect.Descriptor instead.
func (*TxnFixture) Descriptor() ([]byte, []int) {
	return file_txn_proto_rawDescGZIP(), []int{11}
}

func (x *TxnFixture) GetInput() *TxnContext {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *TxnFixture) GetOutput() *TxnResult {
	if x != nil {
		return x.Output
	}
	return nil
}

var File_txn_proto protoreflect.FileDescriptor

var file_txn_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x78, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6f, 0x72, 0x67,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x1a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x75, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e,
	0x6c, 0x79, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x22, 0x6f, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x72,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77,
	0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x77,
	0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x22, 0x9d, 0x04, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x12, 0x4f, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x65, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x13, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x12,
	0x52, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0x8f, 0x02, 0x0a, 0x0a, 0x54, 0x78, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3c, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x41, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43,
	0x74, 0x78, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x43,
	0x74, 0x78, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x0a, 0x52, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22, 0xac, 0x03, 0x0a,
	0x09, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73,
	0x5f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65,
	0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0a, 0x66, 0x65, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x0a,
	0x54, 0x78, 0x6e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x78, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42,
	0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_txn_proto_rawDescOnce sync.Once
	file_txn_proto_rawDescData = file_txn_proto_rawDesc
)

func file_txn_proto_rawDescGZIP() []byte {
	file_txn_proto_rawDescOnce.Do(func() {
		file_txn_proto_rawDescData = protoimpl.X.CompressGZIP(file_txn_proto_rawDescData)
	})
	return file_txn_proto_rawDescData
}

var file_txn_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_txn_proto_goTypes = []any{
	(*MessageHeader)(nil),             // 0: org.solana.sealevel.v1.MessageHeader
	(*CompiledInstruction)(nil),       // 1: org.solana.sealevel.v1.CompiledInstruction
	(*MessageAddressTableLookup)(nil), // 2: org.solana.sealevel.v1.MessageAddressTableLookup
	(*LoadedAddresses)(nil),           // 3: org.solana.sealevel.v1.LoadedAddresses
	(*TransactionMessage)(nil),        // 4: org.solana.sealevel.v1.TransactionMessage
	(*SanitizedTransaction)(nil),      // 5: org.solana.sealevel.v1.SanitizedTransaction
	(*TxnContext)(nil),                // 6: org.solana.sealevel.v1.TxnContext
	(*ResultingState)(nil),            // 7: org.solana.sealevel.v1.ResultingState
	(*RentDebits)(nil),                // 8: org.solana.sealevel.v1.RentDebits
	(*FeeDetails)(nil),                // 9: org.solana.sealevel.v1.FeeDetails
	(*TxnResult)(nil),                 // 10: org.solana.sealevel.v1.TxnResult
	(*TxnFixture)(nil),                // 11: org.solana.sealevel.v1.TxnFixture
	(*AcctState)(nil),                 // 12: org.solana.sealevel.v1.AcctState
	(*EpochContext)(nil),              // 13: org.solana.sealevel.v1.EpochContext
	(*SlotContext)(nil),               // 14: org.solana.sealevel.v1.SlotContext
}
var file_txn_proto_depIdxs = []int32{
	0,  // 0: org.solana.sealevel.v1.TransactionMessage.header:type_name -> org.solana.sealevel.v1.MessageHeader
	12, // 1: org.solana.sealevel.v1.TransactionMessage.account_shared_data:type_name -> org.solana.sealevel.v1.AcctState
	1,  // 2: org.solana.sealevel.v1.TransactionMessage.instructions:type_name -> org.solana.sealevel.v1.CompiledInstruction
	2,  // 3: org.solana.sealevel.v1.TransactionMessage.address_table_lookups:type_name -> org.solana.sealevel.v1.MessageAddressTableLookup
	3,  // 4: org.solana.sealevel.v1.TransactionMessage.loaded_addresses:type_name -> org.solana.sealevel.v1.LoadedAddresses
	4,  // 5: org.solana.sealevel.v1.SanitizedTransaction.message:type_name -> org.solana.sealevel.v1.TransactionMessage
	5,  // 6: org.solana.sealevel.v1.TxnContext.tx:type_name -> org.solana.sealevel.v1.SanitizedTransaction
	13, // 7: org.solana.sealevel.v1.TxnContext.epoch_ctx:type_name -> org.solana.sealevel.v1.EpochContext
	14, // 8: org.solana.sealevel.v1.TxnContext.slot_ctx:type_name -> org.solana.sealevel.v1.SlotContext
	12, // 9: org.solana.sealevel.v1.ResultingState.acct_states:type_name -> org.solana.sealevel.v1.AcctState
	8,  // 10: org.solana.sealevel.v1.ResultingState.rent_debits:type_name -> org.solana.sealevel.v1.RentDebits
	7,  // 11: org.solana.sealevel.v1.TxnResult.resulting_state:type_name -> org.solana.sealevel.v1.ResultingState
	9,  // 12: org.solana.sealevel.v1.TxnResult.fee_details:type_name -> org.solana.sealevel.v1.FeeDetails
	6,  // 13: org.solana.sealevel.v1.TxnFixture.input:type_name -> org.solana.sealevel.v1.TxnContext
	10, // 14: org.solana.sealevel.v1.TxnFixture.output:type_name -> org.solana.sealevel.v1.TxnResult
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_txn_proto_init() }
func file_txn_proto_init() {
	if File_txn_proto != nil {
		return
	}
	file_context_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_txn_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CompiledInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MessageAddressTableLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LoadedAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SanitizedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TxnContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ResultingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RentDebits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*FeeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TxnResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txn_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TxnFixture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_txn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_txn_proto_goTypes,
		DependencyIndexes: file_txn_proto_depIdxs,
		MessageInfos:      file_txn_proto_msgTypes,
	}.Build()
	File_txn_proto = out.File
	file_txn_proto_rawDesc = nil
	file_txn_proto_goTypes = nil
	file_txn_proto_depIdxs = nil
}
