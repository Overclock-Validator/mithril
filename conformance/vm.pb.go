// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: vm.proto

package conformance

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes an input data region. Agave's memory mapping sets up a series of
// memory mapped regions, which combine to make the input data region.
type InputDataRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Offset from the start of the input data segment (0x400000000)
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Content of the memory region
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// If the memory region is writable or not
	IsWritable bool `protobuf:"varint,3,opt,name=is_writable,json=isWritable,proto3" json:"is_writable,omitempty"`
}

func (x *InputDataRegion) Reset() {
	*x = InputDataRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputDataRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputDataRegion) ProtoMessage() {}

func (x *InputDataRegion) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputDataRegion.ProtoReflect.Descriptor instead.
func (*InputDataRegion) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{0}
}

func (x *InputDataRegion) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *InputDataRegion) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *InputDataRegion) GetIsWritable() bool {
	if x != nil {
		return x.IsWritable
	}
	return false
}

// Information sufficient to allow the fuzzer to generate a fd_vm_t context for
// execution inside the VM (excluding the instruction context).
//
// TODO: this currently only includes fields necessary for executing syscalls,
// executing sBPF code will require the rest of the fields in fd_vm_t to be set.
type VmContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum heap size in bytes
	HeapMax uint64 `protobuf:"varint,1,opt,name=heap_max,json=heapMax,proto3" json:"heap_max,omitempty"`
	// Program read-only data
	Rodata []byte `protobuf:"bytes,2,opt,name=rodata,proto3" json:"rodata,omitempty"`
	// Offset of the text section from the start of the program rodata segment
	// (0x100000000)
	RodataTextSectionOffset uint64 `protobuf:"varint,3,opt,name=rodata_text_section_offset,json=rodataTextSectionOffset,proto3" json:"rodata_text_section_offset,omitempty"`
	// Length of the text section in the program rodata region, in bytes.
	RodataTextSectionLength uint64 `protobuf:"varint,4,opt,name=rodata_text_section_length,json=rodataTextSectionLength,proto3" json:"rodata_text_section_length,omitempty"`
	// The input data regions
	InputDataRegions []*InputDataRegion `protobuf:"bytes,5,rep,name=input_data_regions,json=inputDataRegions,proto3" json:"input_data_regions,omitempty"`
	// Registers
	R0  uint64 `protobuf:"varint,6,opt,name=r0,proto3" json:"r0,omitempty"`
	R1  uint64 `protobuf:"varint,7,opt,name=r1,proto3" json:"r1,omitempty"`
	R2  uint64 `protobuf:"varint,8,opt,name=r2,proto3" json:"r2,omitempty"`
	R3  uint64 `protobuf:"varint,9,opt,name=r3,proto3" json:"r3,omitempty"`
	R4  uint64 `protobuf:"varint,10,opt,name=r4,proto3" json:"r4,omitempty"`
	R5  uint64 `protobuf:"varint,11,opt,name=r5,proto3" json:"r5,omitempty"`
	R6  uint64 `protobuf:"varint,12,opt,name=r6,proto3" json:"r6,omitempty"`
	R7  uint64 `protobuf:"varint,13,opt,name=r7,proto3" json:"r7,omitempty"`
	R8  uint64 `protobuf:"varint,14,opt,name=r8,proto3" json:"r8,omitempty"`
	R9  uint64 `protobuf:"varint,15,opt,name=r9,proto3" json:"r9,omitempty"`
	R10 uint64 `protobuf:"varint,16,opt,name=r10,proto3" json:"r10,omitempty"`
	R11 uint64 `protobuf:"varint,17,opt,name=r11,proto3" json:"r11,omitempty"`
}

func (x *VmContext) Reset() {
	*x = VmContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmContext) ProtoMessage() {}

func (x *VmContext) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmContext.ProtoReflect.Descriptor instead.
func (*VmContext) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{1}
}

func (x *VmContext) GetHeapMax() uint64 {
	if x != nil {
		return x.HeapMax
	}
	return 0
}

func (x *VmContext) GetRodata() []byte {
	if x != nil {
		return x.Rodata
	}
	return nil
}

func (x *VmContext) GetRodataTextSectionOffset() uint64 {
	if x != nil {
		return x.RodataTextSectionOffset
	}
	return 0
}

func (x *VmContext) GetRodataTextSectionLength() uint64 {
	if x != nil {
		return x.RodataTextSectionLength
	}
	return 0
}

func (x *VmContext) GetInputDataRegions() []*InputDataRegion {
	if x != nil {
		return x.InputDataRegions
	}
	return nil
}

func (x *VmContext) GetR0() uint64 {
	if x != nil {
		return x.R0
	}
	return 0
}

func (x *VmContext) GetR1() uint64 {
	if x != nil {
		return x.R1
	}
	return 0
}

func (x *VmContext) GetR2() uint64 {
	if x != nil {
		return x.R2
	}
	return 0
}

func (x *VmContext) GetR3() uint64 {
	if x != nil {
		return x.R3
	}
	return 0
}

func (x *VmContext) GetR4() uint64 {
	if x != nil {
		return x.R4
	}
	return 0
}

func (x *VmContext) GetR5() uint64 {
	if x != nil {
		return x.R5
	}
	return 0
}

func (x *VmContext) GetR6() uint64 {
	if x != nil {
		return x.R6
	}
	return 0
}

func (x *VmContext) GetR7() uint64 {
	if x != nil {
		return x.R7
	}
	return 0
}

func (x *VmContext) GetR8() uint64 {
	if x != nil {
		return x.R8
	}
	return 0
}

func (x *VmContext) GetR9() uint64 {
	if x != nil {
		return x.R9
	}
	return 0
}

func (x *VmContext) GetR10() uint64 {
	if x != nil {
		return x.R10
	}
	return 0
}

func (x *VmContext) GetR11() uint64 {
	if x != nil {
		return x.R11
	}
	return 0
}

// A single invocation of a syscall
type SyscallInvocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sBPF function name of the syscall
	FunctionName []byte `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// The initial portion of the heap, for example to store syscall inputs
	HeapPrefix []byte `protobuf:"bytes,2,opt,name=heap_prefix,json=heapPrefix,proto3" json:"heap_prefix,omitempty"`
}

func (x *SyscallInvocation) Reset() {
	*x = SyscallInvocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyscallInvocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyscallInvocation) ProtoMessage() {}

func (x *SyscallInvocation) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyscallInvocation.ProtoReflect.Descriptor instead.
func (*SyscallInvocation) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{2}
}

func (x *SyscallInvocation) GetFunctionName() []byte {
	if x != nil {
		return x.FunctionName
	}
	return nil
}

func (x *SyscallInvocation) GetHeapPrefix() []byte {
	if x != nil {
		return x.HeapPrefix
	}
	return nil
}

// Execution context for a VM Syscall execution.
type SyscallContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmCtx *VmContext `protobuf:"bytes,1,opt,name=vm_ctx,json=vmCtx,proto3" json:"vm_ctx,omitempty"`
	// InflightInstruction - contain temporary fields that live for the duration of an instructions execution, and is needed if we have overhanging context from a previous instruction
	InstrCtx          *InstrContext      `protobuf:"bytes,2,opt,name=instr_ctx,json=instrCtx,proto3" json:"instr_ctx,omitempty"`
	SyscallInvocation *SyscallInvocation `protobuf:"bytes,3,opt,name=syscall_invocation,json=syscallInvocation,proto3" json:"syscall_invocation,omitempty"`
}

func (x *SyscallContext) Reset() {
	*x = SyscallContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyscallContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyscallContext) ProtoMessage() {}

func (x *SyscallContext) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyscallContext.ProtoReflect.Descriptor instead.
func (*SyscallContext) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{3}
}

func (x *SyscallContext) GetVmCtx() *VmContext {
	if x != nil {
		return x.VmCtx
	}
	return nil
}

func (x *SyscallContext) GetInstrCtx() *InstrContext {
	if x != nil {
		return x.InstrCtx
	}
	return nil
}

func (x *SyscallContext) GetSyscallInvocation() *SyscallInvocation {
	if x != nil {
		return x.SyscallInvocation
	}
	return nil
}

// The effects of executing a SyscallContext.
type SyscallEffects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EBPF error code, if the invocation was unsuccessful
	Error int64 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	// Registers
	R0 uint64 `protobuf:"varint,2,opt,name=r0,proto3" json:"r0,omitempty"` // Result of a successful execution
	// CU's remaining
	CuAvail uint64 `protobuf:"varint,3,opt,name=cu_avail,json=cuAvail,proto3" json:"cu_avail,omitempty"`
	// Memory regions
	Heap      []byte `protobuf:"bytes,4,opt,name=heap,proto3" json:"heap,omitempty"`
	Stack     []byte `protobuf:"bytes,5,opt,name=stack,proto3" json:"stack,omitempty"`
	Inputdata []byte `protobuf:"bytes,6,opt,name=inputdata,proto3" json:"inputdata,omitempty"`
	// Current number of stack frames pushed
	FrameCount uint64 `protobuf:"varint,7,opt,name=frame_count,json=frameCount,proto3" json:"frame_count,omitempty"`
	// Syscall log
	Log []byte `protobuf:"bytes,8,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *SyscallEffects) Reset() {
	*x = SyscallEffects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyscallEffects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyscallEffects) ProtoMessage() {}

func (x *SyscallEffects) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyscallEffects.ProtoReflect.Descriptor instead.
func (*SyscallEffects) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{4}
}

func (x *SyscallEffects) GetError() int64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *SyscallEffects) GetR0() uint64 {
	if x != nil {
		return x.R0
	}
	return 0
}

func (x *SyscallEffects) GetCuAvail() uint64 {
	if x != nil {
		return x.CuAvail
	}
	return 0
}

func (x *SyscallEffects) GetHeap() []byte {
	if x != nil {
		return x.Heap
	}
	return nil
}

func (x *SyscallEffects) GetStack() []byte {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *SyscallEffects) GetInputdata() []byte {
	if x != nil {
		return x.Inputdata
	}
	return nil
}

func (x *SyscallEffects) GetFrameCount() uint64 {
	if x != nil {
		return x.FrameCount
	}
	return 0
}

func (x *SyscallEffects) GetLog() []byte {
	if x != nil {
		return x.Log
	}
	return nil
}

// A syscall processing test fixture.
type SyscallFixture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  *SyscallContext `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output *SyscallEffects `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *SyscallFixture) Reset() {
	*x = SyscallFixture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyscallFixture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyscallFixture) ProtoMessage() {}

func (x *SyscallFixture) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyscallFixture.ProtoReflect.Descriptor instead.
func (*SyscallFixture) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{5}
}

func (x *SyscallFixture) GetInput() *SyscallContext {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SyscallFixture) GetOutput() *SyscallEffects {
	if x != nil {
		return x.Output
	}
	return nil
}

// Everything needed to setup a fd_vm_t
type FullVmContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmCtx *VmContext `protobuf:"bytes,1,opt,name=vm_ctx,json=vmCtx,proto3" json:"vm_ctx,omitempty"`
	// InstrContext instr_ctx = 2;
	Features *FeatureSet `protobuf:"bytes,3,opt,name=features,proto3" json:"features,omitempty"`
}

func (x *FullVmContext) Reset() {
	*x = FullVmContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullVmContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullVmContext) ProtoMessage() {}

func (x *FullVmContext) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullVmContext.ProtoReflect.Descriptor instead.
func (*FullVmContext) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{6}
}

func (x *FullVmContext) GetVmCtx() *VmContext {
	if x != nil {
		return x.VmCtx
	}
	return nil
}

func (x *FullVmContext) GetFeatures() *FeatureSet {
	if x != nil {
		return x.Features
	}
	return nil
}

// Effects of fd_vm_validate
type ValidateVmEffects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	// if result is 0 (success), protobuf will be empty!!
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ValidateVmEffects) Reset() {
	*x = ValidateVmEffects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateVmEffects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateVmEffects) ProtoMessage() {}

func (x *ValidateVmEffects) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateVmEffects.ProtoReflect.Descriptor instead.
func (*ValidateVmEffects) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{7}
}

func (x *ValidateVmEffects) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ValidateVmEffects) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Fixture for fd_vm_validate fuzz harness
type ValidateVmFixture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  *FullVmContext     `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output *ValidateVmEffects `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ValidateVmFixture) Reset() {
	*x = ValidateVmFixture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateVmFixture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateVmFixture) ProtoMessage() {}

func (x *ValidateVmFixture) ProtoReflect() protoreflect.Message {
	mi := &file_vm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateVmFixture.ProtoReflect.Descriptor instead.
func (*ValidateVmFixture) Descriptor() ([]byte, []int) {
	return file_vm_proto_rawDescGZIP(), []int{8}
}

func (x *ValidateVmFixture) GetInput() *FullVmContext {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ValidateVmFixture) GetOutput() *ValidateVmEffects {
	if x != nil {
		return x.Output
	}
	return nil
}

var File_vm_proto protoreflect.FileDescriptor

var file_vm_proto_rawDesc = []byte{
	0x0a, 0x08, 0x76, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6f, 0x72, 0x67, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x1a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x64, 0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xd3, 0x03, 0x0a, 0x09, 0x56, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x68, 0x65, 0x61, 0x70, 0x4d, 0x61, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x6f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x72, 0x6f, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x72, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x65, 0x78, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x55, 0x0a, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x30, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x30, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x31, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x32, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x33, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x34, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x35, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x35, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x36, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x36, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x37, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x37, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x38, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x38, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x39, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x39, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x31, 0x30, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72, 0x31, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x31, 0x31,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72, 0x31, 0x31, 0x22, 0x59, 0x0a, 0x11, 0x53,
	0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x70,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xe7, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x63, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x6d, 0x5f,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x05, 0x76, 0x6d,
	0x43, 0x74, 0x78, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x5f, 0x63, 0x74, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x43, 0x74, 0x78, 0x12, 0x58, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x63,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73,
	0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x30, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x30, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x68, 0x65, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x6f, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22,
	0x8e, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x63, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x3e, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c,
	0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x89, 0x01, 0x0a, 0x0d, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x6d, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x05, 0x76, 0x6d, 0x43, 0x74, 0x78, 0x12, 0x3e, 0x0a, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x74, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x11,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x6d, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_vm_proto_rawDescOnce sync.Once
	file_vm_proto_rawDescData = file_vm_proto_rawDesc
)

func file_vm_proto_rawDescGZIP() []byte {
	file_vm_proto_rawDescOnce.Do(func() {
		file_vm_proto_rawDescData = protoimpl.X.CompressGZIP(file_vm_proto_rawDescData)
	})
	return file_vm_proto_rawDescData
}

var file_vm_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_vm_proto_goTypes = []any{
	(*InputDataRegion)(nil),   // 0: org.solana.sealevel.v1.InputDataRegion
	(*VmContext)(nil),         // 1: org.solana.sealevel.v1.VmContext
	(*SyscallInvocation)(nil), // 2: org.solana.sealevel.v1.SyscallInvocation
	(*SyscallContext)(nil),    // 3: org.solana.sealevel.v1.SyscallContext
	(*SyscallEffects)(nil),    // 4: org.solana.sealevel.v1.SyscallEffects
	(*SyscallFixture)(nil),    // 5: org.solana.sealevel.v1.SyscallFixture
	(*FullVmContext)(nil),     // 6: org.solana.sealevel.v1.FullVmContext
	(*ValidateVmEffects)(nil), // 7: org.solana.sealevel.v1.ValidateVmEffects
	(*ValidateVmFixture)(nil), // 8: org.solana.sealevel.v1.ValidateVmFixture
	(*InstrContext)(nil),      // 9: org.solana.sealevel.v1.InstrContext
	(*FeatureSet)(nil),        // 10: org.solana.sealevel.v1.FeatureSet
}
var file_vm_proto_depIdxs = []int32{
	0,  // 0: org.solana.sealevel.v1.VmContext.input_data_regions:type_name -> org.solana.sealevel.v1.InputDataRegion
	1,  // 1: org.solana.sealevel.v1.SyscallContext.vm_ctx:type_name -> org.solana.sealevel.v1.VmContext
	9,  // 2: org.solana.sealevel.v1.SyscallContext.instr_ctx:type_name -> org.solana.sealevel.v1.InstrContext
	2,  // 3: org.solana.sealevel.v1.SyscallContext.syscall_invocation:type_name -> org.solana.sealevel.v1.SyscallInvocation
	3,  // 4: org.solana.sealevel.v1.SyscallFixture.input:type_name -> org.solana.sealevel.v1.SyscallContext
	4,  // 5: org.solana.sealevel.v1.SyscallFixture.output:type_name -> org.solana.sealevel.v1.SyscallEffects
	1,  // 6: org.solana.sealevel.v1.FullVmContext.vm_ctx:type_name -> org.solana.sealevel.v1.VmContext
	10, // 7: org.solana.sealevel.v1.FullVmContext.features:type_name -> org.solana.sealevel.v1.FeatureSet
	6,  // 8: org.solana.sealevel.v1.ValidateVmFixture.input:type_name -> org.solana.sealevel.v1.FullVmContext
	7,  // 9: org.solana.sealevel.v1.ValidateVmFixture.output:type_name -> org.solana.sealevel.v1.ValidateVmEffects
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_vm_proto_init() }
func file_vm_proto_init() {
	if File_vm_proto != nil {
		return
	}
	file_invoke_proto_init()
	file_context_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vm_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*InputDataRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*VmContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SyscallInvocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SyscallContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SyscallEffects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SyscallFixture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FullVmContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateVmEffects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vm_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateVmFixture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vm_proto_goTypes,
		DependencyIndexes: file_vm_proto_depIdxs,
		MessageInfos:      file_vm_proto_msgTypes,
	}.Build()
	File_vm_proto = out.File
	file_vm_proto_rawDesc = nil
	file_vm_proto_goTypes = nil
	file_vm_proto_depIdxs = nil
}
